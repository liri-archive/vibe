import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -noinstantiate -nonrelocatable Vibe.NetworkManager 1.0 /opt/liri/lib/qml'

Module {
    dependencies: ["QtQuick 2.8"]
    Component {
        name: "AppletProxyModel"
        prototype: "QSortFilterProxyModel"
        exports: ["Vibe.NetworkManager/AppletProxyModel 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "sourceModel"; type: "QAbstractItemModel"; isPointer: true }
    }
    Component {
        name: "AvailableDevices"
        prototype: "QObject"
        exports: ["Vibe.NetworkManager/AvailableDevices 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "wiredDeviceAvailable"; type: "bool"; isReadonly: true }
        Property { name: "wirelessDeviceAvailable"; type: "bool"; isReadonly: true }
        Property { name: "modemDeviceAvailable"; type: "bool"; isReadonly: true }
        Property { name: "bluetoothDeviceAvailable"; type: "bool"; isReadonly: true }
        Signal {
            name: "wiredDeviceAvailableChanged"
            Parameter { name: "available"; type: "bool" }
        }
        Signal {
            name: "wirelessDeviceAvailableChanged"
            Parameter { name: "available"; type: "bool" }
        }
        Signal {
            name: "modemDeviceAvailableChanged"
            Parameter { name: "available"; type: "bool" }
        }
        Signal {
            name: "bluetoothDeviceAvailableChanged"
            Parameter { name: "available"; type: "bool" }
        }
        Method { name: "isWiredDeviceAvailable"; type: "bool" }
        Method { name: "isWirelessDeviceAvailable"; type: "bool" }
        Method { name: "isModemDeviceAvailable"; type: "bool" }
        Method { name: "isBluetoothDeviceAvailable"; type: "bool" }
    }
    Component {
        name: "ConnectionIcon"
        prototype: "QObject"
        exports: ["Vibe.NetworkManager/ConnectionIcon 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "connecting"; type: "bool"; isReadonly: true }
        Property { name: "connectionIcon"; type: "string"; isReadonly: true }
        Property { name: "connectionTooltipIcon"; type: "string"; isReadonly: true }
        Signal {
            name: "connectingChanged"
            Parameter { name: "connecting"; type: "bool" }
        }
        Signal {
            name: "connectionIconChanged"
            Parameter { name: "icon"; type: "string" }
        }
        Signal {
            name: "connectionTooltipIconChanged"
            Parameter { name: "icon"; type: "string" }
        }
    }
    Component {
        name: "EnabledConnections"
        prototype: "QObject"
        exports: ["Vibe.NetworkManager/EnabledConnections 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "networkingEnabled"; type: "bool"; isReadonly: true }
        Property { name: "wirelessEnabled"; type: "bool"; isReadonly: true }
        Property { name: "wirelessHwEnabled"; type: "bool"; isReadonly: true }
        Property { name: "wwanEnabled"; type: "bool"; isReadonly: true }
        Property { name: "wwanHwEnabled"; type: "bool"; isReadonly: true }
        Signal {
            name: "networkingEnabled"
            Parameter { name: "enabled"; type: "bool" }
        }
        Signal {
            name: "wirelessEnabled"
            Parameter { name: "enabled"; type: "bool" }
        }
        Signal {
            name: "wirelessHwEnabled"
            Parameter { name: "enabled"; type: "bool" }
        }
        Signal {
            name: "wwanEnabled"
            Parameter { name: "enabled"; type: "bool" }
        }
        Signal {
            name: "wwanHwEnabled"
            Parameter { name: "enabled"; type: "bool" }
        }
        Method {
            name: "onNetworkingEnabled"
            Parameter { name: "enabled"; type: "bool" }
        }
        Method {
            name: "onWirelessEnabled"
            Parameter { name: "enabled"; type: "bool" }
        }
        Method {
            name: "onWirelessHwEnabled"
            Parameter { name: "enabled"; type: "bool" }
        }
        Method {
            name: "onWwanEnabled"
            Parameter { name: "enabled"; type: "bool" }
        }
        Method {
            name: "onWwanHwEnabled"
            Parameter { name: "enabled"; type: "bool" }
        }
    }
    Component {
        name: "Enums"
        prototype: "QObject"
        exports: ["Vibe.NetworkManager/Enums 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ConnectionStatus"
            values: {
                "UnknownState": 0,
                "Activating": 1,
                "Activated": 2,
                "Deactivating": 3,
                "Deactivated": 4
            }
        }
        Enum {
            name: "ConnectionType"
            values: {
                "UnknownConnectionType": 0,
                "Adsl": 1,
                "Bluetooth": 2,
                "Bond": 3,
                "Bridge": 4,
                "Cdma": 5,
                "Gsm": 6,
                "Infiniband": 7,
                "OLPCMesh": 8,
                "Pppoe": 9,
                "Vlan": 10,
                "Vpn": 11,
                "Wimax": 12,
                "Wired": 13,
                "Wireless": 14
            }
        }
        Enum {
            name: "SecurityType"
            values: {
                "UnknownSecurity": -1,
                "NoneSecurity": 0,
                "StaticWep": 1,
                "DynamicWep": 2,
                "Leap": 3,
                "WpaPsk": 4,
                "WpaEap": 5,
                "Wpa2Psk": 6,
                "Wpa2Eap": 7
            }
        }
    }
    Component {
        name: "Handler"
        prototype: "QObject"
        exports: ["Vibe.NetworkManager/Handler 1.0"]
        exportMetaObjectRevisions: [0]
        Method {
            name: "activateConnection"
            Parameter { name: "connection"; type: "string" }
            Parameter { name: "device"; type: "string" }
            Parameter { name: "specificParameter"; type: "string" }
        }
        Method {
            name: "addAndActivateConnection"
            Parameter { name: "device"; type: "string" }
            Parameter { name: "specificParameter"; type: "string" }
            Parameter { name: "password"; type: "string" }
        }
        Method {
            name: "addAndActivateConnection"
            Parameter { name: "device"; type: "string" }
            Parameter { name: "specificParameter"; type: "string" }
        }
        Method {
            name: "addConnection"
            Parameter { name: "map"; type: "NMVariantMapMap" }
        }
        Method {
            name: "deactivateConnection"
            Parameter { name: "connection"; type: "string" }
            Parameter { name: "device"; type: "string" }
        }
        Method { name: "disconnectAll" }
        Method {
            name: "enableAirplaneMode"
            Parameter { name: "enable"; type: "bool" }
        }
        Method {
            name: "enableNetworking"
            Parameter { name: "enable"; type: "bool" }
        }
        Method {
            name: "enableWireless"
            Parameter { name: "enable"; type: "bool" }
        }
        Method {
            name: "enableWwan"
            Parameter { name: "enable"; type: "bool" }
        }
        Method {
            name: "removeConnection"
            Parameter { name: "connection"; type: "string" }
        }
        Method {
            name: "updateConnection"
            Parameter { name: "connection"; type: "NetworkManager::Connection::Ptr" }
            Parameter { name: "map"; type: "NMVariantMapMap" }
        }
        Method { name: "openEditor" }
        Method { name: "requestScan" }
    }
    Component {
        name: "NetworkModel"
        prototype: "QAbstractListModel"
        exports: ["Vibe.NetworkManager/NetworkModel 1.0"]
        exportMetaObjectRevisions: [0]
        Method { name: "onItemUpdated" }
    }
    Component {
        name: "NetworkStatus"
        prototype: "QObject"
        exports: ["Vibe.NetworkManager/NetworkStatus 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "activeConnections"; type: "string"; isReadonly: true }
        Property { name: "networkStatus"; type: "string"; isReadonly: true }
        Signal {
            name: "activeConnectionsChanged"
            Parameter { name: "activeConnections"; type: "string" }
        }
        Signal {
            name: "networkStatusChanged"
            Parameter { name: "status"; type: "string" }
        }
    }
    Component {
        name: "QAbstractProxyModel"
        prototype: "QAbstractItemModel"
        Property { name: "sourceModel"; type: "QAbstractItemModel"; isPointer: true }
        Method {
            name: "mapToSource"
            type: "QModelIndex"
            Parameter { name: "proxyIndex"; type: "QModelIndex" }
        }
        Method {
            name: "mapFromSource"
            type: "QModelIndex"
            Parameter { name: "sourceIndex"; type: "QModelIndex" }
        }
        Method {
            name: "mapSelectionToSource"
            type: "QItemSelection"
            Parameter { name: "selection"; type: "QItemSelection" }
        }
        Method {
            name: "mapSelectionFromSource"
            type: "QItemSelection"
            Parameter { name: "selection"; type: "QItemSelection" }
        }
    }
    Component {
        name: "QSortFilterProxyModel"
        prototype: "QAbstractProxyModel"
        Property { name: "filterRegExp"; type: "QRegExp" }
        Property { name: "filterKeyColumn"; type: "int" }
        Property { name: "dynamicSortFilter"; type: "bool" }
        Property { name: "filterCaseSensitivity"; type: "Qt::CaseSensitivity" }
        Property { name: "sortCaseSensitivity"; type: "Qt::CaseSensitivity" }
        Property { name: "isSortLocaleAware"; type: "bool" }
        Property { name: "sortRole"; type: "int" }
        Property { name: "filterRole"; type: "int" }
        Method {
            name: "setFilterRegExp"
            Parameter { name: "pattern"; type: "string" }
        }
        Method {
            name: "setFilterWildcard"
            Parameter { name: "pattern"; type: "string" }
        }
        Method {
            name: "setFilterFixedString"
            Parameter { name: "pattern"; type: "string" }
        }
        Method { name: "clear" }
        Method { name: "invalidate" }
    }
}
